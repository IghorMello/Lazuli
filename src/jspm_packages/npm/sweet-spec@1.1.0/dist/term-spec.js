"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
const Term_16 = Object.create(Object.prototype, { _attributes: { value: [], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, _descendants: { value: new Map(), writable: false, configurable: false, enumerable: false }, hasDescendant: { value: function (name_110) {
      return this._descendants.has(name_110);
    }, writable: false, configurable: false, enumerable: true }, getDescendant: { value: function (name_111) {
      return this._descendants.get(name_111);
    }, writable: false, configurable: false, enumerable: true }, getAttributes: { value: function () {
      return this._attributes;
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_112) {
      return this._attributes.some(a_113 => a_113.attrName === attr_112);
    }, writable: false, configurable: false, enumerable: true } });
const BindingWithDefault_17 = Object.create(Term_16, { _attributes: { value: [{ attrName: "binding", attrType: { name: "any" } }, { attrName: "init", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_114) {
      return this.getAttributes().some(a_115 => a_115.attrName === attr_114);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(BindingWithDefault_17);
Term_16._descendants.set("BindingWithDefault", BindingWithDefault_17);
const BindingIdentifier_18 = Object.create(Term_16, { _attributes: { value: [{ attrName: "name", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_116) {
      return this.getAttributes().some(a_117 => a_117.attrName === attr_116);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(BindingIdentifier_18);
Term_16._descendants.set("BindingIdentifier", BindingIdentifier_18);
const ArrayBinding_19 = Object.create(Term_16, { _attributes: { value: [{ attrName: "elements", attrType: { name: "any" } }, { attrName: "restElement", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_118) {
      return this.getAttributes().some(a_119 => a_119.attrName === attr_118);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(ArrayBinding_19);
Term_16._descendants.set("ArrayBinding", ArrayBinding_19);
const ObjectBinding_20 = Object.create(Term_16, { _attributes: { value: [{ attrName: "properties", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_120) {
      return this.getAttributes().some(a_121 => a_121.attrName === attr_120);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(ObjectBinding_20);
Term_16._descendants.set("ObjectBinding", ObjectBinding_20);
const BindingPropertyIdentifier_21 = Object.create(Term_16, { _attributes: { value: [{ attrName: "binding", attrType: { name: "any" } }, { attrName: "init", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_122) {
      return this.getAttributes().some(a_123 => a_123.attrName === attr_122);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(BindingPropertyIdentifier_21);
Term_16._descendants.set("BindingPropertyIdentifier", BindingPropertyIdentifier_21);
const BindingPropertyProperty_22 = Object.create(Term_16, { _attributes: { value: [{ attrName: "name", attrType: { name: "any" } }, { attrName: "binding", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_124) {
      return this.getAttributes().some(a_125 => a_125.attrName === attr_124);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(BindingPropertyProperty_22);
Term_16._descendants.set("BindingPropertyProperty", BindingPropertyProperty_22);
const Statement_23 = Object.create(Term_16, { _attributes: { value: [], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_126) {
      return this.getAttributes().some(a_127 => a_127.attrName === attr_126);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(Statement_23);
Term_16._descendants.set("Statement", Statement_23);
const Expression_24 = Object.create(Term_16, { _attributes: { value: [], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_128) {
      return this.getAttributes().some(a_129 => a_129.attrName === attr_128);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(Expression_24);
Term_16._descendants.set("Expression", Expression_24);
const ClassExpression_25 = Object.create(Expression_24, { _attributes: { value: [{ attrName: "name", attrType: { name: "any" } }, { attrName: "super", attrType: { name: "any" } }, { attrName: "elements", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Expression_24.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_130) {
      return this.getAttributes().some(a_131 => a_131.attrName === attr_130);
    }, writable: false, configurable: false, enumerable: true } });
Expression_24._children.push(ClassExpression_25);
Expression_24._descendants.set("ClassExpression", ClassExpression_25);
const ClassDeclaration_26 = Object.create(Statement_23, { _attributes: { value: [{ attrName: "name", attrType: { name: "any" } }, { attrName: "super", attrType: { name: "any" } }, { attrName: "elements", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Statement_23.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_132) {
      return this.getAttributes().some(a_133 => a_133.attrName === attr_132);
    }, writable: false, configurable: false, enumerable: true } });
Statement_23._children.push(ClassDeclaration_26);
Statement_23._descendants.set("ClassDeclaration", ClassDeclaration_26);
const ClassElement_27 = Object.create(Term_16, { _attributes: { value: [{ attrName: "isStatic", attrType: { name: "any" } }, { attrName: "method", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_134) {
      return this.getAttributes().some(a_135 => a_135.attrName === attr_134);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(ClassElement_27);
Term_16._descendants.set("ClassElement", ClassElement_27);
const Module_28 = Object.create(Term_16, { _attributes: { value: [{ attrName: "directives", attrType: { name: "any" } }, { attrName: "items", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_136) {
      return this.getAttributes().some(a_137 => a_137.attrName === attr_136);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(Module_28);
Term_16._descendants.set("Module", Module_28);
const Import_29 = Object.create(Term_16, { _attributes: { value: [{ attrName: "moduleSpecifier", attrType: { name: "any" } }, { attrName: "defaultBinding", attrType: { name: "any" } }, { attrName: "namedImports", attrType: { name: "any" } }, { attrName: "forSyntax", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_138) {
      return this.getAttributes().some(a_139 => a_139.attrName === attr_138);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(Import_29);
Term_16._descendants.set("Import", Import_29);
const ImportNamespace_30 = Object.create(Term_16, { _attributes: { value: [{ attrName: "moduleSpecifier", attrType: { name: "any" } }, { attrName: "defaultBinding", attrType: { name: "any" } }, { attrName: "namespaceBinding", attrType: { name: "any" } }, { attrName: "forSyntax", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_140) {
      return this.getAttributes().some(a_141 => a_141.attrName === attr_140);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(ImportNamespace_30);
Term_16._descendants.set("ImportNamespace", ImportNamespace_30);
const ImportSpecifier_31 = Object.create(Term_16, { _attributes: { value: [{ attrName: "name", attrType: { name: "any" } }, { attrName: "binding", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_142) {
      return this.getAttributes().some(a_143 => a_143.attrName === attr_142);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(ImportSpecifier_31);
Term_16._descendants.set("ImportSpecifier", ImportSpecifier_31);
const ExportAllFrom_32 = Object.create(Term_16, { _attributes: { value: [{ attrName: "moduleSpecifier", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_144) {
      return this.getAttributes().some(a_145 => a_145.attrName === attr_144);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(ExportAllFrom_32);
Term_16._descendants.set("ExportAllFrom", ExportAllFrom_32);
const ExportFrom_33 = Object.create(Term_16, { _attributes: { value: [{ attrName: "namedExports", attrType: { name: "any" } }, { attrName: "moduleSpecifier", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_146) {
      return this.getAttributes().some(a_147 => a_147.attrName === attr_146);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(ExportFrom_33);
Term_16._descendants.set("ExportFrom", ExportFrom_33);
const Export_34 = Object.create(Term_16, { _attributes: { value: [{ attrName: "declaration", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_148) {
      return this.getAttributes().some(a_149 => a_149.attrName === attr_148);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(Export_34);
Term_16._descendants.set("Export", Export_34);
const ExportDefault_35 = Object.create(Term_16, { _attributes: { value: [{ attrName: "body", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_150) {
      return this.getAttributes().some(a_151 => a_151.attrName === attr_150);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(ExportDefault_35);
Term_16._descendants.set("ExportDefault", ExportDefault_35);
const ExportSpecifier_36 = Object.create(Term_16, { _attributes: { value: [{ attrName: "name", attrType: { name: "any" } }, { attrName: "exportedName", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_152) {
      return this.getAttributes().some(a_153 => a_153.attrName === attr_152);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(ExportSpecifier_36);
Term_16._descendants.set("ExportSpecifier", ExportSpecifier_36);
const Method_37 = Object.create(Term_16, { _attributes: { value: [{ attrName: "name", attrType: { name: "any" } }, { attrName: "body", attrType: { name: "any" } }, { attrName: "isGenerator", attrType: { name: "any" } }, { attrName: "params", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_154) {
      return this.getAttributes().some(a_155 => a_155.attrName === attr_154);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(Method_37);
Term_16._descendants.set("Method", Method_37);
const Getter_38 = Object.create(Term_16, { _attributes: { value: [{ attrName: "name", attrType: { name: "any" } }, { attrName: "body", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_156) {
      return this.getAttributes().some(a_157 => a_157.attrName === attr_156);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(Getter_38);
Term_16._descendants.set("Getter", Getter_38);
const Setter_39 = Object.create(Term_16, { _attributes: { value: [{ attrName: "name", attrType: { name: "any" } }, { attrName: "body", attrType: { name: "any" } }, { attrName: "param", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_158) {
      return this.getAttributes().some(a_159 => a_159.attrName === attr_158);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(Setter_39);
Term_16._descendants.set("Setter", Setter_39);
const DataProperty_40 = Object.create(Term_16, { _attributes: { value: [{ attrName: "name", attrType: { name: "any" } }, { attrName: "expression", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_160) {
      return this.getAttributes().some(a_161 => a_161.attrName === attr_160);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(DataProperty_40);
Term_16._descendants.set("DataProperty", DataProperty_40);
const ShorthandProperty_41 = Object.create(Term_16, { _attributes: { value: [{ attrName: "name", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_162) {
      return this.getAttributes().some(a_163 => a_163.attrName === attr_162);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(ShorthandProperty_41);
Term_16._descendants.set("ShorthandProperty", ShorthandProperty_41);
const StaticPropertyName_42 = Object.create(Term_16, { _attributes: { value: [{ attrName: "value", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_164) {
      return this.getAttributes().some(a_165 => a_165.attrName === attr_164);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(StaticPropertyName_42);
Term_16._descendants.set("StaticPropertyName", StaticPropertyName_42);
const ComputedPropertyName_43 = Object.create(Term_16, { _attributes: { value: [{ attrName: "expression", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_166) {
      return this.getAttributes().some(a_167 => a_167.attrName === attr_166);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(ComputedPropertyName_43);
Term_16._descendants.set("ComputedPropertyName", ComputedPropertyName_43);
const LiteralBooleanExpression_44 = Object.create(Expression_24, { _attributes: { value: [{ attrName: "value", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Expression_24.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_168) {
      return this.getAttributes().some(a_169 => a_169.attrName === attr_168);
    }, writable: false, configurable: false, enumerable: true } });
Expression_24._children.push(LiteralBooleanExpression_44);
Expression_24._descendants.set("LiteralBooleanExpression", LiteralBooleanExpression_44);
const LiteralInfinityExpression_45 = Object.create(Expression_24, { _attributes: { value: [], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Expression_24.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_170) {
      return this.getAttributes().some(a_171 => a_171.attrName === attr_170);
    }, writable: false, configurable: false, enumerable: true } });
Expression_24._children.push(LiteralInfinityExpression_45);
Expression_24._descendants.set("LiteralInfinityExpression", LiteralInfinityExpression_45);
const LiteralNullExpression_46 = Object.create(Expression_24, { _attributes: { value: [], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Expression_24.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_172) {
      return this.getAttributes().some(a_173 => a_173.attrName === attr_172);
    }, writable: false, configurable: false, enumerable: true } });
Expression_24._children.push(LiteralNullExpression_46);
Expression_24._descendants.set("LiteralNullExpression", LiteralNullExpression_46);
const LiteralNumericExpression_47 = Object.create(Expression_24, { _attributes: { value: [{ attrName: "value", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Expression_24.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_174) {
      return this.getAttributes().some(a_175 => a_175.attrName === attr_174);
    }, writable: false, configurable: false, enumerable: true } });
Expression_24._children.push(LiteralNumericExpression_47);
Expression_24._descendants.set("LiteralNumericExpression", LiteralNumericExpression_47);
const LiteralRegExpExpression_48 = Object.create(Expression_24, { _attributes: { value: [{ attrName: "pattern", attrType: { name: "any" } }, { attrName: "flags", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Expression_24.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_176) {
      return this.getAttributes().some(a_177 => a_177.attrName === attr_176);
    }, writable: false, configurable: false, enumerable: true } });
Expression_24._children.push(LiteralRegExpExpression_48);
Expression_24._descendants.set("LiteralRegExpExpression", LiteralRegExpExpression_48);
const LiteralStringExpression_49 = Object.create(Expression_24, { _attributes: { value: [{ attrName: "value", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Expression_24.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_178) {
      return this.getAttributes().some(a_179 => a_179.attrName === attr_178);
    }, writable: false, configurable: false, enumerable: true } });
Expression_24._children.push(LiteralStringExpression_49);
Expression_24._descendants.set("LiteralStringExpression", LiteralStringExpression_49);
const ArrayExpression_50 = Object.create(Expression_24, { _attributes: { value: [{ attrName: "elements", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Expression_24.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_180) {
      return this.getAttributes().some(a_181 => a_181.attrName === attr_180);
    }, writable: false, configurable: false, enumerable: true } });
Expression_24._children.push(ArrayExpression_50);
Expression_24._descendants.set("ArrayExpression", ArrayExpression_50);
const ArrowExpression_51 = Object.create(Expression_24, { _attributes: { value: [{ attrName: "params", attrType: { name: "any" } }, { attrName: "body", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Expression_24.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_182) {
      return this.getAttributes().some(a_183 => a_183.attrName === attr_182);
    }, writable: false, configurable: false, enumerable: true } });
Expression_24._children.push(ArrowExpression_51);
Expression_24._descendants.set("ArrowExpression", ArrowExpression_51);
const AssignmentExpression_52 = Object.create(Expression_24, { _attributes: { value: [{ attrName: "binding", attrType: { name: "any" } }, { attrName: "expression", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Expression_24.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_184) {
      return this.getAttributes().some(a_185 => a_185.attrName === attr_184);
    }, writable: false, configurable: false, enumerable: true } });
Expression_24._children.push(AssignmentExpression_52);
Expression_24._descendants.set("AssignmentExpression", AssignmentExpression_52);
const BinaryExpression_53 = Object.create(Expression_24, { _attributes: { value: [{ attrName: "operator", attrType: { name: "any" } }, { attrName: "left", attrType: { name: "any" } }, { attrName: "right", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Expression_24.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_186) {
      return this.getAttributes().some(a_187 => a_187.attrName === attr_186);
    }, writable: false, configurable: false, enumerable: true } });
Expression_24._children.push(BinaryExpression_53);
Expression_24._descendants.set("BinaryExpression", BinaryExpression_53);
const CallExpression_54 = Object.create(Expression_24, { _attributes: { value: [{ attrName: "callee", attrType: { name: "any" } }, { attrName: "arguments", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Expression_24.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_188) {
      return this.getAttributes().some(a_189 => a_189.attrName === attr_188);
    }, writable: false, configurable: false, enumerable: true } });
Expression_24._children.push(CallExpression_54);
Expression_24._descendants.set("CallExpression", CallExpression_54);
const ComputedAssignmentExpression_55 = Object.create(Expression_24, { _attributes: { value: [{ attrName: "operator", attrType: { name: "any" } }, { attrName: "binding", attrType: { name: "any" } }, { attrName: "expression", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Expression_24.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_190) {
      return this.getAttributes().some(a_191 => a_191.attrName === attr_190);
    }, writable: false, configurable: false, enumerable: true } });
Expression_24._children.push(ComputedAssignmentExpression_55);
Expression_24._descendants.set("ComputedAssignmentExpression", ComputedAssignmentExpression_55);
const ComputedMemberExpression_56 = Object.create(Expression_24, { _attributes: { value: [{ attrName: "object", attrType: { name: "any" } }, { attrName: "expression", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Expression_24.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_192) {
      return this.getAttributes().some(a_193 => a_193.attrName === attr_192);
    }, writable: false, configurable: false, enumerable: true } });
Expression_24._children.push(ComputedMemberExpression_56);
Expression_24._descendants.set("ComputedMemberExpression", ComputedMemberExpression_56);
const ConditionalExpression_57 = Object.create(Expression_24, { _attributes: { value: [{ attrName: "test", attrType: { name: "any" } }, { attrName: "consequent", attrType: { name: "any" } }, { attrName: "alternate", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Expression_24.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_194) {
      return this.getAttributes().some(a_195 => a_195.attrName === attr_194);
    }, writable: false, configurable: false, enumerable: true } });
Expression_24._children.push(ConditionalExpression_57);
Expression_24._descendants.set("ConditionalExpression", ConditionalExpression_57);
const FunctionExpression_58 = Object.create(Expression_24, { _attributes: { value: [{ attrName: "name", attrType: { name: "any" } }, { attrName: "isGenerator", attrType: { name: "any" } }, { attrName: "params", attrType: { name: "any" } }, { attrName: "body", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Expression_24.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_196) {
      return this.getAttributes().some(a_197 => a_197.attrName === attr_196);
    }, writable: false, configurable: false, enumerable: true } });
Expression_24._children.push(FunctionExpression_58);
Expression_24._descendants.set("FunctionExpression", FunctionExpression_58);
const IdentifierExpression_59 = Object.create(Expression_24, { _attributes: { value: [{ attrName: "name", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Expression_24.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_198) {
      return this.getAttributes().some(a_199 => a_199.attrName === attr_198);
    }, writable: false, configurable: false, enumerable: true } });
Expression_24._children.push(IdentifierExpression_59);
Expression_24._descendants.set("IdentifierExpression", IdentifierExpression_59);
const NewExpression_60 = Object.create(Expression_24, { _attributes: { value: [{ attrName: "callee", attrType: { name: "any" } }, { attrName: "arguments", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Expression_24.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_200) {
      return this.getAttributes().some(a_201 => a_201.attrName === attr_200);
    }, writable: false, configurable: false, enumerable: true } });
Expression_24._children.push(NewExpression_60);
Expression_24._descendants.set("NewExpression", NewExpression_60);
const NewTargetExpression_61 = Object.create(Expression_24, { _attributes: { value: [], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Expression_24.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_202) {
      return this.getAttributes().some(a_203 => a_203.attrName === attr_202);
    }, writable: false, configurable: false, enumerable: true } });
Expression_24._children.push(NewTargetExpression_61);
Expression_24._descendants.set("NewTargetExpression", NewTargetExpression_61);
const ObjectExpression_62 = Object.create(Expression_24, { _attributes: { value: [{ attrName: "properties", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Expression_24.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_204) {
      return this.getAttributes().some(a_205 => a_205.attrName === attr_204);
    }, writable: false, configurable: false, enumerable: true } });
Expression_24._children.push(ObjectExpression_62);
Expression_24._descendants.set("ObjectExpression", ObjectExpression_62);
const UnaryExpression_63 = Object.create(Expression_24, { _attributes: { value: [{ attrName: "operator", attrType: { name: "any" } }, { attrName: "operand", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Expression_24.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_206) {
      return this.getAttributes().some(a_207 => a_207.attrName === attr_206);
    }, writable: false, configurable: false, enumerable: true } });
Expression_24._children.push(UnaryExpression_63);
Expression_24._descendants.set("UnaryExpression", UnaryExpression_63);
const StaticMemberExpression_64 = Object.create(Expression_24, { _attributes: { value: [{ attrName: "object", attrType: { name: "any" } }, { attrName: "property", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Expression_24.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_208) {
      return this.getAttributes().some(a_209 => a_209.attrName === attr_208);
    }, writable: false, configurable: false, enumerable: true } });
Expression_24._children.push(StaticMemberExpression_64);
Expression_24._descendants.set("StaticMemberExpression", StaticMemberExpression_64);
const TemplateExpression_65 = Object.create(Expression_24, { _attributes: { value: [{ attrName: "tag", attrType: { name: "any" } }, { attrName: "elements", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Expression_24.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_210) {
      return this.getAttributes().some(a_211 => a_211.attrName === attr_210);
    }, writable: false, configurable: false, enumerable: true } });
Expression_24._children.push(TemplateExpression_65);
Expression_24._descendants.set("TemplateExpression", TemplateExpression_65);
const ThisExpression_66 = Object.create(Expression_24, { _attributes: { value: [{ attrName: "stx", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Expression_24.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_212) {
      return this.getAttributes().some(a_213 => a_213.attrName === attr_212);
    }, writable: false, configurable: false, enumerable: true } });
Expression_24._children.push(ThisExpression_66);
Expression_24._descendants.set("ThisExpression", ThisExpression_66);
const UpdateExpression_67 = Object.create(Expression_24, { _attributes: { value: [{ attrName: "isPrefix", attrType: { name: "any" } }, { attrName: "operator", attrType: { name: "any" } }, { attrName: "operand", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Expression_24.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_214) {
      return this.getAttributes().some(a_215 => a_215.attrName === attr_214);
    }, writable: false, configurable: false, enumerable: true } });
Expression_24._children.push(UpdateExpression_67);
Expression_24._descendants.set("UpdateExpression", UpdateExpression_67);
const YieldExpression_68 = Object.create(Expression_24, { _attributes: { value: [{ attrName: "expression", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Expression_24.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_216) {
      return this.getAttributes().some(a_217 => a_217.attrName === attr_216);
    }, writable: false, configurable: false, enumerable: true } });
Expression_24._children.push(YieldExpression_68);
Expression_24._descendants.set("YieldExpression", YieldExpression_68);
const YieldGeneratorExpression_69 = Object.create(Expression_24, { _attributes: { value: [{ attrName: "expression", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Expression_24.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_218) {
      return this.getAttributes().some(a_219 => a_219.attrName === attr_218);
    }, writable: false, configurable: false, enumerable: true } });
Expression_24._children.push(YieldGeneratorExpression_69);
Expression_24._descendants.set("YieldGeneratorExpression", YieldGeneratorExpression_69);
const ParenthesizedExpression_70 = Object.create(Expression_24, { _attributes: { value: [{ attrName: "inner", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Expression_24.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_220) {
      return this.getAttributes().some(a_221 => a_221.attrName === attr_220);
    }, writable: false, configurable: false, enumerable: true } });
Expression_24._children.push(ParenthesizedExpression_70);
Expression_24._descendants.set("ParenthesizedExpression", ParenthesizedExpression_70);
const BlockStatement_71 = Object.create(Statement_23, { _attributes: { value: [{ attrName: "block", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Statement_23.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_222) {
      return this.getAttributes().some(a_223 => a_223.attrName === attr_222);
    }, writable: false, configurable: false, enumerable: true } });
Statement_23._children.push(BlockStatement_71);
Statement_23._descendants.set("BlockStatement", BlockStatement_71);
const BreakStatement_72 = Object.create(Statement_23, { _attributes: { value: [{ attrName: "label", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Statement_23.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_224) {
      return this.getAttributes().some(a_225 => a_225.attrName === attr_224);
    }, writable: false, configurable: false, enumerable: true } });
Statement_23._children.push(BreakStatement_72);
Statement_23._descendants.set("BreakStatement", BreakStatement_72);
const ContinueStatement_73 = Object.create(Statement_23, { _attributes: { value: [{ attrName: "label", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Statement_23.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_226) {
      return this.getAttributes().some(a_227 => a_227.attrName === attr_226);
    }, writable: false, configurable: false, enumerable: true } });
Statement_23._children.push(ContinueStatement_73);
Statement_23._descendants.set("ContinueStatement", ContinueStatement_73);
const CompoundAssignmentExpression_74 = Object.create(Statement_23, { _attributes: { value: [{ attrName: "binding", attrType: { name: "any" } }, { attrName: "operator", attrType: { name: "any" } }, { attrName: "expression", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Statement_23.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_228) {
      return this.getAttributes().some(a_229 => a_229.attrName === attr_228);
    }, writable: false, configurable: false, enumerable: true } });
Statement_23._children.push(CompoundAssignmentExpression_74);
Statement_23._descendants.set("CompoundAssignmentExpression", CompoundAssignmentExpression_74);
const DebuggerStatement_75 = Object.create(Statement_23, { _attributes: { value: [], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Statement_23.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_230) {
      return this.getAttributes().some(a_231 => a_231.attrName === attr_230);
    }, writable: false, configurable: false, enumerable: true } });
Statement_23._children.push(DebuggerStatement_75);
Statement_23._descendants.set("DebuggerStatement", DebuggerStatement_75);
const DoWhileStatement_76 = Object.create(Statement_23, { _attributes: { value: [{ attrName: "test", attrType: { name: "any" } }, { attrName: "body", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Statement_23.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_232) {
      return this.getAttributes().some(a_233 => a_233.attrName === attr_232);
    }, writable: false, configurable: false, enumerable: true } });
Statement_23._children.push(DoWhileStatement_76);
Statement_23._descendants.set("DoWhileStatement", DoWhileStatement_76);
const EmptyStatement_77 = Object.create(Statement_23, { _attributes: { value: [], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Statement_23.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_234) {
      return this.getAttributes().some(a_235 => a_235.attrName === attr_234);
    }, writable: false, configurable: false, enumerable: true } });
Statement_23._children.push(EmptyStatement_77);
Statement_23._descendants.set("EmptyStatement", EmptyStatement_77);
const ExpressionStatement_78 = Object.create(Statement_23, { _attributes: { value: [{ attrName: "expression", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Statement_23.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_236) {
      return this.getAttributes().some(a_237 => a_237.attrName === attr_236);
    }, writable: false, configurable: false, enumerable: true } });
Statement_23._children.push(ExpressionStatement_78);
Statement_23._descendants.set("ExpressionStatement", ExpressionStatement_78);
const ForInStatement_79 = Object.create(Statement_23, { _attributes: { value: [{ attrName: "left", attrType: { name: "any" } }, { attrName: "right", attrType: { name: "any" } }, { attrName: "body", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Statement_23.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_238) {
      return this.getAttributes().some(a_239 => a_239.attrName === attr_238);
    }, writable: false, configurable: false, enumerable: true } });
Statement_23._children.push(ForInStatement_79);
Statement_23._descendants.set("ForInStatement", ForInStatement_79);
const ForOfStatement_80 = Object.create(Statement_23, { _attributes: { value: [{ attrName: "left", attrType: { name: "any" } }, { attrName: "right", attrType: { name: "any" } }, { attrName: "body", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Statement_23.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_240) {
      return this.getAttributes().some(a_241 => a_241.attrName === attr_240);
    }, writable: false, configurable: false, enumerable: true } });
Statement_23._children.push(ForOfStatement_80);
Statement_23._descendants.set("ForOfStatement", ForOfStatement_80);
const ForStatement_81 = Object.create(Statement_23, { _attributes: { value: [{ attrName: "init", attrType: { name: "any" } }, { attrName: "test", attrType: { name: "any" } }, { attrName: "update", attrType: { name: "any" } }, { attrName: "body", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Statement_23.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_242) {
      return this.getAttributes().some(a_243 => a_243.attrName === attr_242);
    }, writable: false, configurable: false, enumerable: true } });
Statement_23._children.push(ForStatement_81);
Statement_23._descendants.set("ForStatement", ForStatement_81);
const IfStatement_82 = Object.create(Statement_23, { _attributes: { value: [{ attrName: "test", attrType: { name: "any" } }, { attrName: "consequent", attrType: { name: "any" } }, { attrName: "alternate", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Statement_23.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_244) {
      return this.getAttributes().some(a_245 => a_245.attrName === attr_244);
    }, writable: false, configurable: false, enumerable: true } });
Statement_23._children.push(IfStatement_82);
Statement_23._descendants.set("IfStatement", IfStatement_82);
const LabeledStatement_83 = Object.create(Statement_23, { _attributes: { value: [{ attrName: "label", attrType: { name: "any" } }, { attrName: "body", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Statement_23.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_246) {
      return this.getAttributes().some(a_247 => a_247.attrName === attr_246);
    }, writable: false, configurable: false, enumerable: true } });
Statement_23._children.push(LabeledStatement_83);
Statement_23._descendants.set("LabeledStatement", LabeledStatement_83);
const ReturnStatement_84 = Object.create(Statement_23, { _attributes: { value: [{ attrName: "expression", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Statement_23.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_248) {
      return this.getAttributes().some(a_249 => a_249.attrName === attr_248);
    }, writable: false, configurable: false, enumerable: true } });
Statement_23._children.push(ReturnStatement_84);
Statement_23._descendants.set("ReturnStatement", ReturnStatement_84);
const SwitchStatement_85 = Object.create(Statement_23, { _attributes: { value: [{ attrName: "discriminant", attrType: { name: "any" } }, { attrName: "cases", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Statement_23.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_250) {
      return this.getAttributes().some(a_251 => a_251.attrName === attr_250);
    }, writable: false, configurable: false, enumerable: true } });
Statement_23._children.push(SwitchStatement_85);
Statement_23._descendants.set("SwitchStatement", SwitchStatement_85);
const SwitchStatementWithDefault_86 = Object.create(Statement_23, { _attributes: { value: [{ attrName: "discriminant", attrType: { name: "any" } }, { attrName: "preDefaultCases", attrType: { name: "any" } }, { attrName: "defaultCase", attrType: { name: "any" } }, { attrName: "postDefaultCases", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Statement_23.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_252) {
      return this.getAttributes().some(a_253 => a_253.attrName === attr_252);
    }, writable: false, configurable: false, enumerable: true } });
Statement_23._children.push(SwitchStatementWithDefault_86);
Statement_23._descendants.set("SwitchStatementWithDefault", SwitchStatementWithDefault_86);
const ThrowStatement_87 = Object.create(Statement_23, { _attributes: { value: [{ attrName: "expression", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Statement_23.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_254) {
      return this.getAttributes().some(a_255 => a_255.attrName === attr_254);
    }, writable: false, configurable: false, enumerable: true } });
Statement_23._children.push(ThrowStatement_87);
Statement_23._descendants.set("ThrowStatement", ThrowStatement_87);
const TryCatchStatement_88 = Object.create(Statement_23, { _attributes: { value: [{ attrName: "body", attrType: { name: "any" } }, { attrName: "catchClause", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Statement_23.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_256) {
      return this.getAttributes().some(a_257 => a_257.attrName === attr_256);
    }, writable: false, configurable: false, enumerable: true } });
Statement_23._children.push(TryCatchStatement_88);
Statement_23._descendants.set("TryCatchStatement", TryCatchStatement_88);
const TryFinallyStatement_89 = Object.create(Statement_23, { _attributes: { value: [{ attrName: "body", attrType: { name: "any" } }, { attrName: "catchClause", attrType: { name: "any" } }, { attrName: "finalizer", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Statement_23.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_258) {
      return this.getAttributes().some(a_259 => a_259.attrName === attr_258);
    }, writable: false, configurable: false, enumerable: true } });
Statement_23._children.push(TryFinallyStatement_89);
Statement_23._descendants.set("TryFinallyStatement", TryFinallyStatement_89);
const VariableDeclarationStatement_90 = Object.create(Statement_23, { _attributes: { value: [{ attrName: "declaration", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Statement_23.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_260) {
      return this.getAttributes().some(a_261 => a_261.attrName === attr_260);
    }, writable: false, configurable: false, enumerable: true } });
Statement_23._children.push(VariableDeclarationStatement_90);
Statement_23._descendants.set("VariableDeclarationStatement", VariableDeclarationStatement_90);
const WithStatement_91 = Object.create(Statement_23, { _attributes: { value: [{ attrName: "object", attrType: { name: "any" } }, { attrName: "body", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Statement_23.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_262) {
      return this.getAttributes().some(a_263 => a_263.attrName === attr_262);
    }, writable: false, configurable: false, enumerable: true } });
Statement_23._children.push(WithStatement_91);
Statement_23._descendants.set("WithStatement", WithStatement_91);
const WhileStatement_92 = Object.create(Statement_23, { _attributes: { value: [{ attrName: "test", attrType: { name: "any" } }, { attrName: "body", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Statement_23.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_264) {
      return this.getAttributes().some(a_265 => a_265.attrName === attr_264);
    }, writable: false, configurable: false, enumerable: true } });
Statement_23._children.push(WhileStatement_92);
Statement_23._descendants.set("WhileStatement", WhileStatement_92);
const Pragma_93 = Object.create(Term_16, { _attributes: { value: [{ attrName: "kind", attrType: { name: "any" } }, { attrName: "items", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_266) {
      return this.getAttributes().some(a_267 => a_267.attrName === attr_266);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(Pragma_93);
Term_16._descendants.set("Pragma", Pragma_93);
const Block_94 = Object.create(Term_16, { _attributes: { value: [{ attrName: "statements", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_268) {
      return this.getAttributes().some(a_269 => a_269.attrName === attr_268);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(Block_94);
Term_16._descendants.set("Block", Block_94);
const CatchClause_95 = Object.create(Term_16, { _attributes: { value: [{ attrName: "binding", attrType: { name: "any" } }, { attrName: "body", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_270) {
      return this.getAttributes().some(a_271 => a_271.attrName === attr_270);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(CatchClause_95);
Term_16._descendants.set("CatchClause", CatchClause_95);
const Directive_96 = Object.create(Term_16, { _attributes: { value: [{ attrName: "rawValue", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_272) {
      return this.getAttributes().some(a_273 => a_273.attrName === attr_272);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(Directive_96);
Term_16._descendants.set("Directive", Directive_96);
const FormalParameters_97 = Object.create(Term_16, { _attributes: { value: [{ attrName: "items", attrType: { name: "any" } }, { attrName: "rest", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_274) {
      return this.getAttributes().some(a_275 => a_275.attrName === attr_274);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(FormalParameters_97);
Term_16._descendants.set("FormalParameters", FormalParameters_97);
const FunctionBody_98 = Object.create(Term_16, { _attributes: { value: [{ attrName: "directives", attrType: { name: "any" } }, { attrName: "statements", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_276) {
      return this.getAttributes().some(a_277 => a_277.attrName === attr_276);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(FunctionBody_98);
Term_16._descendants.set("FunctionBody", FunctionBody_98);
const FunctionDeclaration_99 = Object.create(Statement_23, { _attributes: { value: [{ attrName: "name", attrType: { name: "any" } }, { attrName: "isGenerator", attrType: { name: "any" } }, { attrName: "params", attrType: { name: "any" } }, { attrName: "body", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Statement_23.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_278) {
      return this.getAttributes().some(a_279 => a_279.attrName === attr_278);
    }, writable: false, configurable: false, enumerable: true } });
Statement_23._children.push(FunctionDeclaration_99);
Statement_23._descendants.set("FunctionDeclaration", FunctionDeclaration_99);
const Script_100 = Object.create(Term_16, { _attributes: { value: [{ attrName: "directives", attrType: { name: "any" } }, { attrName: "statements", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_280) {
      return this.getAttributes().some(a_281 => a_281.attrName === attr_280);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(Script_100);
Term_16._descendants.set("Script", Script_100);
const SpreadElement_101 = Object.create(Term_16, { _attributes: { value: [{ attrName: "expression", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_282) {
      return this.getAttributes().some(a_283 => a_283.attrName === attr_282);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(SpreadElement_101);
Term_16._descendants.set("SpreadElement", SpreadElement_101);
const Super_102 = Object.create(Term_16, { _attributes: { value: [], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_284) {
      return this.getAttributes().some(a_285 => a_285.attrName === attr_284);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(Super_102);
Term_16._descendants.set("Super", Super_102);
const SwitchCase_103 = Object.create(Term_16, { _attributes: { value: [{ attrName: "test", attrType: { name: "any" } }, { attrName: "consequent", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_286) {
      return this.getAttributes().some(a_287 => a_287.attrName === attr_286);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(SwitchCase_103);
Term_16._descendants.set("SwitchCase", SwitchCase_103);
const SwitchDefault_104 = Object.create(Term_16, { _attributes: { value: [{ attrName: "consequent", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_288) {
      return this.getAttributes().some(a_289 => a_289.attrName === attr_288);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(SwitchDefault_104);
Term_16._descendants.set("SwitchDefault", SwitchDefault_104);
const TemplateElement_105 = Object.create(Term_16, { _attributes: { value: [{ attrName: "rawValue", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_290) {
      return this.getAttributes().some(a_291 => a_291.attrName === attr_290);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(TemplateElement_105);
Term_16._descendants.set("TemplateElement", TemplateElement_105);
const SyntaxTemplate_106 = Object.create(Term_16, { _attributes: { value: [{ attrName: "template", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_292) {
      return this.getAttributes().some(a_293 => a_293.attrName === attr_292);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(SyntaxTemplate_106);
Term_16._descendants.set("SyntaxTemplate", SyntaxTemplate_106);
const SyntaxQuote_107 = Object.create(Term_16, { _attributes: { value: [{ attrName: "name", attrType: { name: "any" } }, { attrName: "template", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_294) {
      return this.getAttributes().some(a_295 => a_295.attrName === attr_294);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(SyntaxQuote_107);
Term_16._descendants.set("SyntaxQuote", SyntaxQuote_107);
const VariableDeclaration_108 = Object.create(Term_16, { _attributes: { value: [{ attrName: "kind", attrType: { name: "any" } }, { attrName: "declarators", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_296) {
      return this.getAttributes().some(a_297 => a_297.attrName === attr_296);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(VariableDeclaration_108);
Term_16._descendants.set("VariableDeclaration", VariableDeclaration_108);
const VariableDeclarator_109 = Object.create(Term_16, { _attributes: { value: [{ attrName: "binding", attrType: { name: "any" } }, { attrName: "init", attrType: { name: "any" } }], writable: false, configurable: false, enumerable: false }, _children: { value: [], writable: false, configurable: false, enumerable: false }, getAttributes: { value: function () {
      return Term_16.getAttributes().concat(this._attributes);
    }, writable: false, configurable: false, enumerable: true }, hasAttribute: { value: function (attr_298) {
      return this.getAttributes().some(a_299 => a_299.attrName === attr_298);
    }, writable: false, configurable: false, enumerable: true } });
Term_16._children.push(VariableDeclarator_109);
Term_16._descendants.set("VariableDeclarator", VariableDeclarator_109);
exports.default = Term_16;
//# sourceMappingURL=data:application/json;base64,