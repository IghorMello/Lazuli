"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
const Term_1157 = Object.create(Object.prototype, { spec: { value: {}, writable: true, configurable: false, enumerable: true }, fields: { value: [], writable: false, configurable: false, enumerable: true } });
const BindingWithDefault_1158 = Object.create(Term_1157, { fields: { value: ["binding", "init"], writable: false, configurable: false, enumerable: true } });
BindingWithDefault_1158.spec.BindingWithDefault = BindingWithDefault_1158;
const BindingIdentifier_1159 = Object.create(Term_1157, { fields: { value: ["name"], writable: false, configurable: false, enumerable: true } });
BindingIdentifier_1159.spec.BindingIdentifier = BindingIdentifier_1159;
const ArrayBinding_1160 = Object.create(Term_1157, { fields: { value: ["elements", "restElement"], writable: false, configurable: false, enumerable: true } });
ArrayBinding_1160.spec.ArrayBinding = ArrayBinding_1160;
const ObjectBinding_1161 = Object.create(Term_1157, { fields: { value: ["properties"], writable: false, configurable: false, enumerable: true } });
ObjectBinding_1161.spec.ObjectBinding = ObjectBinding_1161;
const BindingPropertyIdentifier_1162 = Object.create(Term_1157, { fields: { value: ["binding", "init"], writable: false, configurable: false, enumerable: true } });
BindingPropertyIdentifier_1162.spec.BindingPropertyIdentifier = BindingPropertyIdentifier_1162;
const BindingPropertyProperty_1163 = Object.create(Term_1157, { fields: { value: ["name", "binding"], writable: false, configurable: false, enumerable: true } });
BindingPropertyProperty_1163.spec.BindingPropertyProperty = BindingPropertyProperty_1163;
const Statement_1164 = Object.create(Term_1157, { fields: { value: [], writable: false, configurable: false, enumerable: true } });
Statement_1164.spec.Statement = Statement_1164;
const Expression_1165 = Object.create(Term_1157, { fields: { value: [], writable: false, configurable: false, enumerable: true } });
Expression_1165.spec.Expression = Expression_1165;
const ClassExpression_1166 = Object.create(Expression_1165, { fields: { value: ["name", "super", "elements"], writable: false, configurable: false, enumerable: true } });
ClassExpression_1166.spec.ClassExpression = ClassExpression_1166;
const ClassDeclaration_1167 = Object.create(Statement_1164, { fields: { value: ["name", "super", "elements"], writable: false, configurable: false, enumerable: true } });
ClassDeclaration_1167.spec.ClassDeclaration = ClassDeclaration_1167;
const ClassElement_1168 = Object.create(Term_1157, { fields: { value: ["isStatic", "method"], writable: false, configurable: false, enumerable: true } });
ClassElement_1168.spec.ClassElement = ClassElement_1168;
const Module_1169 = Object.create(Term_1157, { fields: { value: ["directives", "items"], writable: false, configurable: false, enumerable: true } });
Module_1169.spec.Module = Module_1169;
const Import_1170 = Object.create(Term_1157, { fields: { value: ["moduleSpecifier", "defaultBinding", "namedImports", "forSyntax"], writable: false, configurable: false, enumerable: true } });
Import_1170.spec.Import = Import_1170;
const ImportNamespace_1171 = Object.create(Term_1157, { fields: { value: ["moduleSpecifier", "defaultBinding", "namespaceBinding"], writable: false, configurable: false, enumerable: true } });
ImportNamespace_1171.spec.ImportNamespace = ImportNamespace_1171;
const ImportSpecifier_1172 = Object.create(Term_1157, { fields: { value: ["name", "binding"], writable: false, configurable: false, enumerable: true } });
ImportSpecifier_1172.spec.ImportSpecifier = ImportSpecifier_1172;
const ExportAllFrom_1173 = Object.create(Term_1157, { fields: { value: ["moduleSpecifier"], writable: false, configurable: false, enumerable: true } });
ExportAllFrom_1173.spec.ExportAllFrom = ExportAllFrom_1173;
const ExportFrom_1174 = Object.create(Term_1157, { fields: { value: ["namedExports", "moduleSpecifier"], writable: false, configurable: false, enumerable: true } });
ExportFrom_1174.spec.ExportFrom = ExportFrom_1174;
const Export_1175 = Object.create(Term_1157, { fields: { value: ["declaration"], writable: false, configurable: false, enumerable: true } });
Export_1175.spec.Export = Export_1175;
const ExportDefault_1176 = Object.create(Term_1157, { fields: { value: ["body"], writable: false, configurable: false, enumerable: true } });
ExportDefault_1176.spec.ExportDefault = ExportDefault_1176;
const ExportSpecifier_1177 = Object.create(Term_1157, { fields: { value: ["name", "exportedName"], writable: false, configurable: false, enumerable: true } });
ExportSpecifier_1177.spec.ExportSpecifier = ExportSpecifier_1177;
const Method_1178 = Object.create(Term_1157, { fields: { value: ["name", "body", "isGenerator", "params"], writable: false, configurable: false, enumerable: true } });
Method_1178.spec.Method = Method_1178;
const Getter_1179 = Object.create(Term_1157, { fields: { value: ["name", "body"], writable: false, configurable: false, enumerable: true } });
Getter_1179.spec.Getter = Getter_1179;
const Setter_1180 = Object.create(Term_1157, { fields: { value: ["name", "body", "param"], writable: false, configurable: false, enumerable: true } });
Setter_1180.spec.Setter = Setter_1180;
const DataProperty_1181 = Object.create(Term_1157, { fields: { value: ["name", "expression"], writable: false, configurable: false, enumerable: true } });
DataProperty_1181.spec.DataProperty = DataProperty_1181;
const ShorthandProperty_1182 = Object.create(Term_1157, { fields: { value: ["expression"], writable: false, configurable: false, enumerable: true } });
ShorthandProperty_1182.spec.ShorthandProperty = ShorthandProperty_1182;
const StaticPropertyName_1183 = Object.create(Term_1157, { fields: { value: ["value"], writable: false, configurable: false, enumerable: true } });
StaticPropertyName_1183.spec.StaticPropertyName = StaticPropertyName_1183;
const LiteralBooleanExpression_1184 = Object.create(Expression_1165, { fields: { value: ["value"], writable: false, configurable: false, enumerable: true } });
LiteralBooleanExpression_1184.spec.LiteralBooleanExpression = LiteralBooleanExpression_1184;
const LiteralInfinityExpression_1185 = Object.create(Expression_1165, { fields: { value: [], writable: false, configurable: false, enumerable: true } });
LiteralInfinityExpression_1185.spec.LiteralInfinityExpression = LiteralInfinityExpression_1185;
const LiteralNullExpression_1186 = Object.create(Expression_1165, { fields: { value: [], writable: false, configurable: false, enumerable: true } });
LiteralNullExpression_1186.spec.LiteralNullExpression = LiteralNullExpression_1186;
const LiteralNumericExpression_1187 = Object.create(Expression_1165, { fields: { value: ["value"], writable: false, configurable: false, enumerable: true } });
LiteralNumericExpression_1187.spec.LiteralNumericExpression = LiteralNumericExpression_1187;
const LiteralRegExpExpression_1188 = Object.create(Expression_1165, { fields: { value: ["pattern", "flags"], writable: false, configurable: false, enumerable: true } });
LiteralRegExpExpression_1188.spec.LiteralRegExpExpression = LiteralRegExpExpression_1188;
const LiteralStringExpression_1189 = Object.create(Expression_1165, { fields: { value: ["value"], writable: false, configurable: false, enumerable: true } });
LiteralStringExpression_1189.spec.LiteralStringExpression = LiteralStringExpression_1189;
const ArrayExpression_1190 = Object.create(Expression_1165, { fields: { value: ["elements"], writable: false, configurable: false, enumerable: true } });
ArrayExpression_1190.spec.ArrayExpression = ArrayExpression_1190;
const ArrowExpression_1191 = Object.create(Expression_1165, { fields: { value: ["params", "body"], writable: false, configurable: false, enumerable: true } });
ArrowExpression_1191.spec.ArrowExpression = ArrowExpression_1191;
const AssignmentExpression_1192 = Object.create(Expression_1165, { fields: { value: ["binding", "expression"], writable: false, configurable: false, enumerable: true } });
AssignmentExpression_1192.spec.AssignmentExpression = AssignmentExpression_1192;
const BinaryExpression_1193 = Object.create(Expression_1165, { fields: { value: ["operator", "left", "right"], writable: false, configurable: false, enumerable: true } });
BinaryExpression_1193.spec.BinaryExpression = BinaryExpression_1193;
const CallExpression_1194 = Object.create(Expression_1165, { fields: { value: ["callee", "arguments"], writable: false, configurable: false, enumerable: true } });
CallExpression_1194.spec.CallExpression = CallExpression_1194;
const ComputedAssignmentExpression_1195 = Object.create(Expression_1165, { fields: { value: ["operator", "binding", "expression"], writable: false, configurable: false, enumerable: true } });
ComputedAssignmentExpression_1195.spec.ComputedAssignmentExpression = ComputedAssignmentExpression_1195;
const ComputedMemberExpression_1196 = Object.create(Expression_1165, { fields: { value: ["object", "expression"], writable: false, configurable: false, enumerable: true } });
ComputedMemberExpression_1196.spec.ComputedMemberExpression = ComputedMemberExpression_1196;
const ConditionalExpression_1197 = Object.create(Expression_1165, { fields: { value: ["test", "consequent", "alternate"], writable: false, configurable: false, enumerable: true } });
ConditionalExpression_1197.spec.ConditionalExpression = ConditionalExpression_1197;
const FunctionExpression_1198 = Object.create(Expression_1165, { fields: { value: ["name", "isGenerator", "params", "body"], writable: false, configurable: false, enumerable: true } });
FunctionExpression_1198.spec.FunctionExpression = FunctionExpression_1198;
const IdentifierExpression_1199 = Object.create(Expression_1165, { fields: { value: ["name"], writable: false, configurable: false, enumerable: true } });
IdentifierExpression_1199.spec.IdentifierExpression = IdentifierExpression_1199;
const NewExpression_1200 = Object.create(Expression_1165, { fields: { value: ["callee", "arguments"], writable: false, configurable: false, enumerable: true } });
NewExpression_1200.spec.NewExpression = NewExpression_1200;
const NewTargetExpression_1201 = Object.create(Expression_1165, { fields: { value: [], writable: false, configurable: false, enumerable: true } });
NewTargetExpression_1201.spec.NewTargetExpression = NewTargetExpression_1201;
const ObjectExpression_1202 = Object.create(Expression_1165, { fields: { value: ["properties"], writable: false, configurable: false, enumerable: true } });
ObjectExpression_1202.spec.ObjectExpression = ObjectExpression_1202;
const UnaryExpression_1203 = Object.create(Expression_1165, { fields: { value: ["operator", "operand"], writable: false, configurable: false, enumerable: true } });
UnaryExpression_1203.spec.UnaryExpression = UnaryExpression_1203;
const StaticMemberExpression_1204 = Object.create(Expression_1165, { fields: { value: ["object", "property"], writable: false, configurable: false, enumerable: true } });
StaticMemberExpression_1204.spec.StaticMemberExpression = StaticMemberExpression_1204;
const TemplateExpression_1205 = Object.create(Expression_1165, { fields: { value: ["tag", "elements"], writable: false, configurable: false, enumerable: true } });
TemplateExpression_1205.spec.TemplateExpression = TemplateExpression_1205;
const ThisExpression_1206 = Object.create(Expression_1165, { fields: { value: [], writable: false, configurable: false, enumerable: true } });
ThisExpression_1206.spec.ThisExpression = ThisExpression_1206;
const UpdateExpression_1207 = Object.create(Expression_1165, { fields: { value: ["isPrefix", "operator", "operand"], writable: false, configurable: false, enumerable: true } });
UpdateExpression_1207.spec.UpdateExpression = UpdateExpression_1207;
const YieldExpression_1208 = Object.create(Expression_1165, { fields: { value: ["expression"], writable: false, configurable: false, enumerable: true } });
YieldExpression_1208.spec.YieldExpression = YieldExpression_1208;
const YieldGeneratorExpression_1209 = Object.create(Expression_1165, { fields: { value: ["expression"], writable: false, configurable: false, enumerable: true } });
YieldGeneratorExpression_1209.spec.YieldGeneratorExpression = YieldGeneratorExpression_1209;
const ParenthesizedExpression_1210 = Object.create(Expression_1165, { fields: { value: ["inner"], writable: false, configurable: false, enumerable: true } });
ParenthesizedExpression_1210.spec.ParenthesizedExpression = ParenthesizedExpression_1210;
const BlockStatement_1211 = Object.create(Statement_1164, { fields: { value: ["block"], writable: false, configurable: false, enumerable: true } });
BlockStatement_1211.spec.BlockStatement = BlockStatement_1211;
const BreakStatement_1212 = Object.create(Statement_1164, { fields: { value: ["label"], writable: false, configurable: false, enumerable: true } });
BreakStatement_1212.spec.BreakStatement = BreakStatement_1212;
const ContinueStatement_1213 = Object.create(Statement_1164, { fields: { value: ["label"], writable: false, configurable: false, enumerable: true } });
ContinueStatement_1213.spec.ContinueStatement = ContinueStatement_1213;
const CompoundAssignmentExpression_1214 = Object.create(Statement_1164, { fields: { value: ["binding", "operator", "expression"], writable: false, configurable: false, enumerable: true } });
CompoundAssignmentExpression_1214.spec.CompoundAssignmentExpression = CompoundAssignmentExpression_1214;
const DebuggerStatement_1215 = Object.create(Statement_1164, { fields: { value: [], writable: false, configurable: false, enumerable: true } });
DebuggerStatement_1215.spec.DebuggerStatement = DebuggerStatement_1215;
const DoWhileStatement_1216 = Object.create(Statement_1164, { fields: { value: ["test", "body"], writable: false, configurable: false, enumerable: true } });
DoWhileStatement_1216.spec.DoWhileStatement = DoWhileStatement_1216;
const EmptyStatement_1217 = Object.create(Statement_1164, { fields: { value: [], writable: false, configurable: false, enumerable: true } });
EmptyStatement_1217.spec.EmptyStatement = EmptyStatement_1217;
const ExpressionStatement_1218 = Object.create(Statement_1164, { fields: { value: ["expression"], writable: false, configurable: false, enumerable: true } });
ExpressionStatement_1218.spec.ExpressionStatement = ExpressionStatement_1218;
const ForInStatement_1219 = Object.create(Statement_1164, { fields: { value: ["left", "right", "body"], writable: false, configurable: false, enumerable: true } });
ForInStatement_1219.spec.ForInStatement = ForInStatement_1219;
const ForOfStatement_1220 = Object.create(Statement_1164, { fields: { value: ["left", "right", "body"], writable: false, configurable: false, enumerable: true } });
ForOfStatement_1220.spec.ForOfStatement = ForOfStatement_1220;
const ForStatement_1221 = Object.create(Statement_1164, { fields: { value: ["init", "test", "update", "body"], writable: false, configurable: false, enumerable: true } });
ForStatement_1221.spec.ForStatement = ForStatement_1221;
const IfStatement_1222 = Object.create(Statement_1164, { fields: { value: ["test", "consequent", "alternate"], writable: false, configurable: false, enumerable: true } });
IfStatement_1222.spec.IfStatement = IfStatement_1222;
const LabeledStatement_1223 = Object.create(Statement_1164, { fields: { value: ["label", "body"], writable: false, configurable: false, enumerable: true } });
LabeledStatement_1223.spec.LabeledStatement = LabeledStatement_1223;
const ReturnStatement_1224 = Object.create(Statement_1164, { fields: { value: ["expression"], writable: false, configurable: false, enumerable: true } });
ReturnStatement_1224.spec.ReturnStatement = ReturnStatement_1224;
const SwitchStatement_1225 = Object.create(Statement_1164, { fields: { value: ["discriminant", "cases"], writable: false, configurable: false, enumerable: true } });
SwitchStatement_1225.spec.SwitchStatement = SwitchStatement_1225;
const SwitchStatementWithDefault_1226 = Object.create(Statement_1164, { fields: { value: ["discriminant", "preDefaultCases", "defaultCase", "postDefaultCases"], writable: false, configurable: false, enumerable: true } });
SwitchStatementWithDefault_1226.spec.SwitchStatementWithDefault = SwitchStatementWithDefault_1226;
const ThrowStatement_1227 = Object.create(Statement_1164, { fields: { value: ["expression"], writable: false, configurable: false, enumerable: true } });
ThrowStatement_1227.spec.ThrowStatement = ThrowStatement_1227;
const TryCatchStatement_1228 = Object.create(Statement_1164, { fields: { value: ["body", "catchClause"], writable: false, configurable: false, enumerable: true } });
TryCatchStatement_1228.spec.TryCatchStatement = TryCatchStatement_1228;
const TryFinallyStatement_1229 = Object.create(Statement_1164, { fields: { value: ["body", "catchClause", "finalizer"], writable: false, configurable: false, enumerable: true } });
TryFinallyStatement_1229.spec.TryFinallyStatement = TryFinallyStatement_1229;
const VariableDeclarationStatement_1230 = Object.create(Statement_1164, { fields: { value: ["declaration"], writable: false, configurable: false, enumerable: true } });
VariableDeclarationStatement_1230.spec.VariableDeclarationStatement = VariableDeclarationStatement_1230;
const WithStatement_1231 = Object.create(Statement_1164, { fields: { value: ["object", "body"], writable: false, configurable: false, enumerable: true } });
WithStatement_1231.spec.WithStatement = WithStatement_1231;
const WhileStatement_1232 = Object.create(Statement_1164, { fields: { value: ["test", "body"], writable: false, configurable: false, enumerable: true } });
WhileStatement_1232.spec.WhileStatement = WhileStatement_1232;
const Pragma_1233 = Object.create(Term_1157, { fields: { value: ["kind", "items"], writable: false, configurable: false, enumerable: true } });
Pragma_1233.spec.Pragma = Pragma_1233;
const Block_1234 = Object.create(Term_1157, { fields: { value: ["statements"], writable: false, configurable: false, enumerable: true } });
Block_1234.spec.Block = Block_1234;
const CatchClause_1235 = Object.create(Term_1157, { fields: { value: ["binding", "body"], writable: false, configurable: false, enumerable: true } });
CatchClause_1235.spec.CatchClause = CatchClause_1235;
const Directive_1236 = Object.create(Term_1157, { fields: { value: ["rawValue"], writable: false, configurable: false, enumerable: true } });
Directive_1236.spec.Directive = Directive_1236;
const FormalParameters_1237 = Object.create(Term_1157, { fields: { value: ["items", "rest"], writable: false, configurable: false, enumerable: true } });
FormalParameters_1237.spec.FormalParameters = FormalParameters_1237;
const FunctionBody_1238 = Object.create(Term_1157, { fields: { value: ["directives", "statements"], writable: false, configurable: false, enumerable: true } });
FunctionBody_1238.spec.FunctionBody = FunctionBody_1238;
const FunctionDeclaration_1239 = Object.create(Statement_1164, { fields: { value: ["name", "isGenerator", "params", "body"], writable: false, configurable: false, enumerable: true } });
FunctionDeclaration_1239.spec.FunctionDeclaration = FunctionDeclaration_1239;
const Script_1240 = Object.create(Term_1157, { fields: { value: ["directives", "statements"], writable: false, configurable: false, enumerable: true } });
Script_1240.spec.Script = Script_1240;
const SpreadElement_1241 = Object.create(Term_1157, { fields: { value: ["expression"], writable: false, configurable: false, enumerable: true } });
SpreadElement_1241.spec.SpreadElement = SpreadElement_1241;
const Super_1242 = Object.create(Term_1157, { fields: { value: [], writable: false, configurable: false, enumerable: true } });
Super_1242.spec.Super = Super_1242;
const SwitchCase_1243 = Object.create(Term_1157, { fields: { value: ["test", "consequent"], writable: false, configurable: false, enumerable: true } });
SwitchCase_1243.spec.SwitchCase = SwitchCase_1243;
const SwitchDefault_1244 = Object.create(Term_1157, { fields: { value: ["consequent"], writable: false, configurable: false, enumerable: true } });
SwitchDefault_1244.spec.SwitchDefault = SwitchDefault_1244;
const TemplateElement_1245 = Object.create(Term_1157, { fields: { value: ["rawValue"], writable: false, configurable: false, enumerable: true } });
TemplateElement_1245.spec.TemplateElement = TemplateElement_1245;
const SyntaxTemplate_1246 = Object.create(Term_1157, { fields: { value: ["template"], writable: false, configurable: false, enumerable: true } });
SyntaxTemplate_1246.spec.SyntaxTemplate = SyntaxTemplate_1246;
const VariableDeclaration_1247 = Object.create(Term_1157, { fields: { value: ["kind", "declarators"], writable: false, configurable: false, enumerable: true } });
VariableDeclaration_1247.spec.VariableDeclaration = VariableDeclaration_1247;
const VariableDeclarator_1248 = Object.create(Term_1157, { fields: { value: ["binding", "init"], writable: false, configurable: false, enumerable: true } });
VariableDeclarator_1248.spec.VariableDeclarator = VariableDeclarator_1248;
exports.default = Term_1157;
//# sourceMappingURL=data:application/json;base64,