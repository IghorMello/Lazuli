{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../src/index.spec.ts"],"names":[],"mappings":";AAAA,gCAAkC;AAClC,qCAAuC;AACvC,mCAAqC;AAErC,IAAI,CAAC,WAAW,EAAE,UAAA,CAAC;IACjB,CAAC,CAAC,IAAI,CAAC,uCAAuC,EAAE,UAAA,CAAC;QAC/C,IAAM,EAAE,GAAG,SAAS,CAAC,UAAU,CAAM,EAAE,CAAM,EAAE,CAAM;YACnD,MAAM,CAAC,IAAI,OAAO,CAAC,UAAA,OAAO,IAAI,OAAA,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,EAAxB,CAAwB,CAAC,CAAA;QACzD,CAAC,CAAC,CAAA;QAEF,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,CAAA;QAErB,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,cAAM,OAAA,CAAC,CAAC,GAAG,EAAE,EAAP,CAAO,CAAC,CAAA;IAC5B,CAAC,CAAC,CAAA;IAEF,CAAC,CAAC,IAAI,CAAC,sBAAsB,EAAE,UAAA,CAAC;QAC9B,IAAM,EAAE,GAAG,SAAS,CAAC,UAAU,CAAM,EAAE,CAAM;YAC3C,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;gBACjC,UAAU,CAAC,cAAM,OAAA,MAAM,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,EAA1B,CAA0B,EAAE,GAAG,CAAC,CAAA;YACnD,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,CAAA;QAErB,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,UAAC,GAAG;YACX,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,CAAA;YAC7B,CAAC,CAAC,GAAG,EAAE,CAAA;QACT,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,CAAC,CAAC,IAAI,CAAC,0CAA0C,EAAE,UAAA,CAAC;QAClD,IAAM,EAAE,GAAG,SAAS,CAAC;YACnB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;gBACjC,UAAU,CAAC,cAAM,OAAA,MAAM,CAAC,KAAK,CAAC,EAAb,CAAa,EAAE,GAAG,CAAC,CAAA;YACtC,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,CAAA;QAErB,EAAE,CAAC,UAAC,GAAG;YACL,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,yCAAyC,CAAC,CAAA;YAC/D,CAAC,CAAC,GAAG,EAAE,CAAA;QACT,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import test = require('blue-tape')\nimport Promise = require('any-promise')\nimport unthenify = require('./index')\n\ntest('unthenify', t => {\n  t.test('make callbacks from promise functions', t => {\n    const fn = unthenify(function (a: any, b: any, c: any) {\n      return new Promise(resolve => setTimeout(resolve, 100))\n    })\n\n    t.equal(fn.length, 4)\n\n    fn(1, 2, 3, () => t.end())\n  })\n\n  t.test('callback with errors', t => {\n    const fn = unthenify(function (a: any, b: any) {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => reject(new Error('boom!')), 100)\n      })\n    })\n\n    t.equal(fn.length, 3)\n\n    fn(1, 2, (err) => {\n      t.equal(err.message, 'boom!')\n      t.end()\n    })\n  })\n\n  t.test('handle promises reject with falsy values', t => {\n    const fn = unthenify(function () {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => reject(false), 100)\n      })\n    })\n\n    t.equal(fn.length, 1)\n\n    fn((err) => {\n      t.equal(err.message, 'Promise was rejected with a falsy value')\n      t.end()\n    })\n  })\n})\n"]}