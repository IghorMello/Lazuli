"use strict";const utils=require("./doc-utils"),willBreak=utils.willBreak;function assertDoc(a){if("string"!=typeof a&&(null==a||"string"!=typeof a.type))throw new Error("Value "+JSON.stringify(a)+" is not a valid document")}function concat(a){return a.forEach(assertDoc),{type:"concat",parts:a}}function indent(a,b){return assertDoc(b),{type:"indent",contents:b,n:a}}function group(a,b){return b=b||{},assertDoc(a),{type:"group",contents:a,break:!!b.shouldBreak,expandedStates:b.expandedStates}}function conditionalGroup(a,b){return group(a[0],Object.assign(b||{},{expandedStates:a}))}function ifBreak(a,b){return a&&assertDoc(a),b&&assertDoc(b),{type:"if-break",breakContents:a,flatContents:b}}function lineSuffix(a){if("string"!=typeof a)throw new Error("lineSuffix only takes a string, but given: "+JSON.stringify(a));return{type:"line-suffix",contents:a}}const breakParent={type:"break-parent"},line={type:"line"},softline={type:"line",soft:!0},hardline=concat([{type:"line",hard:!0},breakParent]),literalline=concat([{type:"line",hard:!0,literal:!0},breakParent]);function join(a,b){for(var c=[],d=0;d<b.length;d++)0!==d&&c.push(a),c.push(b[d]);return concat(c)}module.exports={concat,join,line,softline,hardline,literalline,group,conditionalGroup,lineSuffix,breakParent,ifBreak,indent};

