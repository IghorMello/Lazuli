"use strict";function traverseDoc(a,b,c){function d(f){if(b&&(e=e||!1===b(f)),!e){if("concat"===f.type)for(var g=0;g<f.parts.length;g++)d(f.parts[g]);else"if-break"===f.type?(f.breakContents&&d(f.breakContents),f.flatContents&&d(f.flatContents)):f.contents&&d(f.contents);c&&c(f)}}var e=!1;d(a)}function findInDoc(a,b,c){var d=c;return traverseDoc(a,function(e){var f=b(e);if(void 0!==f)return d=f,!1}),d}function isEmpty(a){return"string"==typeof a&&0===a.length}function getFirstString(a){return findInDoc(a,b=>{if("string"==typeof b&&0!==b.trim().length)return b},null)}function isLineNext(a){return findInDoc(a,b=>{return"string"!=typeof b&&(!("line"!==b.type)||void 0)},!1)}function willBreak(a){return findInDoc(a,b=>{return"group"===b.type&&b.break||"line"===b.type&&b.hard||void 0},!1)}function breakParentGroup(a){if(0<a.length){const b=a[a.length-1];b.expandedStates||(b.break=!0)}return null}function propagateBreaks(a){const b=[];traverseDoc(a,c=>{"break-parent"===c.type&&breakParentGroup(b),"group"===c.type&&b.push(c)},c=>{if("group"===c.type){const d=b.pop();d.break&&breakParentGroup(b)}})}module.exports={isEmpty,getFirstString,willBreak,isLineNext,traverseDoc,propagateBreaks};

