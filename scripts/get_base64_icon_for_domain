#!/usr/bin/env node
// Generated by LiveScript 1.5.0
(function(){
  var fetch, co, cfy, jimp, icojs, cheerio, path, get_canonical_url, get_canonical_domain, url_to_domain, domain_to_url, favicon_patterns_href, domain_to_favicons_cache, fetchFavicons, fetch_favicon, toBuffer, make_async, does_file_exist_cached, does_file_exist, async_filter, get_favicon_data_for_url, get_png_data_for_url, get_favicon_data_for_domain, get_favicon_data_for_domain_or_null, out$ = typeof exports != 'undefined' && exports || this;
  fetch = require('node-fetch');
  co = require('co');
  cfy = require('cfy');
  jimp = require('jimp');
  icojs = require('icojs');
  cheerio = require('cheerio');
  path = require('path');
  get_canonical_url = cfy(function*(url){
    var response, e;
    try {
      response = (yield fetch(url));
      return response.url;
    } catch (e$) {
      e = e$;
      return null;
    }
  });
  get_canonical_domain = cfy(function*(domain){
    var url, canonical_url;
    url = domain_to_url(domain);
    canonical_url = (yield get_canonical_url(url));
    if (canonical_url != null) {
      return url_to_domain(canonical_url);
    }
    return null;
  });
  url_to_domain = function(url){
    var domain;
    if (url.indexOf("://") > -1) {
      domain = url.split('/')[2];
    } else {
      domain = url.split('/')[0];
    }
    domain = domain.split(':')[0];
    return domain;
  };
  domain_to_url = function(domain){
    return "https://" + url_to_domain(domain) + '/';
  };
  favicon_patterns_href = ['link[rel=apple-touch-icon-precomposed]', 'link[rel=apple-touch-icon]', 'link[rel="shortcut icon"]', 'link[rel=icon]'];
  domain_to_favicons_cache = {};
  out$.fetchFavicons = fetchFavicons = cfy(function*(domain){
    var response, text, $, output, i$, ref$, len$, pattern, j$, ref1$, len1$, x, url;
    domain = domain_to_url(domain);
    if (domain_to_favicons_cache[domain] != null) {
      return domain_to_favicons_cache[domain];
    }
    response = (yield fetch(domain));
    text = (yield response.text());
    $ = cheerio.load(text);
    output = [];
    for (i$ = 0, len$ = (ref$ = favicon_patterns_href).length; i$ < len$; ++i$) {
      pattern = ref$[i$];
      for (j$ = 0, len1$ = (ref1$ = $(pattern)).length; j$ < len1$; ++j$) {
        x = ref1$[j$];
        url = $(x).attr('href');
        if (url != null) {
          output.push(url);
        }
      }
    }
    output.push('/favicon.ico');
    output = output.map(function(x){
      var domain_without_slash;
      if (x.startsWith('http://') || x.startsWith('https://')) {
        return x;
      }
      if (x.startsWith('//')) {
        return 'https:' + x;
      }
      domain_without_slash = domain;
      if (domain.endsWith('/') && x.startsWith('/')) {
        domain_without_slash = domain.substr(0, domain.length - 1);
      }
      return domain_without_slash + x;
    });
    output = output.map(function(it){
      return {
        href: it,
        name: 'favicon.ico'
      };
    });
    domain_to_favicons_cache[domain] = output;
    return output;
  });
  fetch_favicon = {
    fetchFavicons: fetchFavicons
  };
  toBuffer = function(ab){
    var buf, view, i$, to$, i;
    buf = new Buffer(ab.byteLength);
    view = new Uint8Array(ab);
    for (i$ = 0, to$ = buf.length; i$ < to$; ++i$) {
      i = i$;
      buf[i] = view[i];
    }
    return buf;
  };
  make_async = function(sync_func){
    return function(x){
      return Promise.resolve(sync_func(x));
    };
  };
  does_file_exist_cached = {};
  does_file_exist = cfy(function*(url){
    var request, e;
    if (typeof url !== 'string' && typeof url.href === 'string') {
      url = url.href;
    }
    if (does_file_exist_cached[url] != null) {
      return does_file_exist_cached[url];
    }
    try {
      request = (yield fetch(url));
      if (!request.ok) {
        return false;
      }
      (yield request.text());
      does_file_exist_cached[url] = true;
      return true;
    } catch (e$) {
      e = e$;
      does_file_exist_cached[url] = false;
      return false;
    }
  });
  async_filter = cfy(function*(list, async_function){
    var output, i$, len$, x;
    output = [];
    for (i$ = 0, len$ = list.length; i$ < len$; ++i$) {
      x = list[i$];
      if ((yield async_function(x))) {
        output.push(x);
      }
    }
    return output;
  });
  get_favicon_data_for_url = cfy(function*(domain){
    var favicon_path, all_favicon_paths, filter_functions, i$, len$, filter_function, new_all_favicon_paths, favicon_response, favicon_buffer, favicon_ico_parsed, favicon_png_buffer, e, favicon_data;
    if (domain.endsWith('.ico')) {
      favicon_path = domain;
    } else {
      if (!(domain.startsWith('http://') || domain.startsWith('https://') || domain.startsWith('//'))) {
        domain = 'https://' + domain;
      } else if (domain.startsWith('//')) {
        domain = 'https:' + domain;
      }
      all_favicon_paths = (yield fetch_favicon.fetchFavicons(domain));
      filter_functions = [does_file_exist];
      filter_functions = filter_functions.concat([
        function(it){
          return it.name === 'favicon.ico';
        }, function(it){
          return it.href.endsWith('favicon.ico');
        }, function(it){
          return it.href.startsWith('favicon.ico');
        }, function(it){
          return it.href.includes('favicon.ico');
        }, function(it){
          return it.href.endsWith('.ico');
        }, function(it){
          return it.href.includes('favicon');
        }
      ].map(make_async));
      for (i$ = 0, len$ = filter_functions.length; i$ < len$; ++i$) {
        filter_function = filter_functions[i$];
        new_all_favicon_paths = (yield async_filter(all_favicon_paths, filter_function));
        if (new_all_favicon_paths.length > 0) {
          all_favicon_paths = new_all_favicon_paths;
        }
      }
      favicon_path = (yield get_canonical_url(all_favicon_paths[0].href));
    }
    if (favicon_path == null || favicon_path.length === 0) {
      throw new Error('no favicon path found');
    }
    try {
      favicon_response = (yield fetch(favicon_path));
      favicon_buffer = new Uint8Array((yield favicon_response.buffer())).buffer;
      favicon_ico_parsed = (yield icojs.parse(favicon_buffer));
      favicon_png_buffer = toBuffer(favicon_ico_parsed[0].buffer);
      return 'data:image/png;base64,' + favicon_png_buffer.toString('base64');
    } catch (e$) {
      e = e$;
      favicon_data = (yield jimp.read(favicon_path));
      favicon_data.resize(40, 40);
      return (yield function(it){
        return favicon_data.getBase64('image/png', it);
      });
    }
  });
  get_png_data_for_url = cfy(function*(domain){
    var favicon_path, all_favicon_paths, filter_functions, i$, len$, filter_function, new_all_favicon_paths, favicon_data;
    if (domain.endsWith('.png') || domain.endsWith('.svg') || domain.endsWith('.ico')) {
      favicon_path = domain;
    } else {
      if (!(domain.startsWith('http://') || domain.startsWith('https://') || domain.startsWith('//'))) {
        domain = 'http://' + domain;
      } else if (domain.startsWith('//')) {
        domain = 'http:' + domain;
      }
      all_favicon_paths = (yield fetch_favicon.fetchFavicons(domain));
      filter_functions = [does_file_exist];
      filter_functions = filter_functions.concat([
        function(it){
          return it.href.includes('icon');
        }, function(it){
          return it.href.endsWith('.png');
        }, function(it){
          return it.href.includes('.png');
        }
      ].map(make_async));
      for (i$ = 0, len$ = filter_functions.length; i$ < len$; ++i$) {
        filter_function = filter_functions[i$];
        new_all_favicon_paths = (yield async_filter(all_favicon_paths, filter_function));
        if (new_all_favicon_paths.length > 0) {
          all_favicon_paths = new_all_favicon_paths;
        }
      }
      favicon_path = (yield get_canonical_url(all_favicon_paths[0].href));
    }
    favicon_data = (yield jimp.read(favicon_path));
    favicon_data.resize(40, 40);
    return (yield function(it){
      return favicon_data.getBase64('image/png', it);
    });
  });
  out$.get_favicon_data_for_domain = get_favicon_data_for_domain = cfy(function*(domain){
    var e, canonical_domain;
    try {
      return (yield get_png_data_for_url(domain));
    } catch (e$) {
      e = e$;
    }
    canonical_domain = (yield get_canonical_domain(domain));
    try {
      return (yield get_png_data_for_url(canonical_domain));
    } catch (e$) {
      e = e$;
    }
    try {
      return (yield get_favicon_data_for_url(domain));
    } catch (e$) {
      e = e$;
    }
    return (yield get_favicon_data_for_url(canonical_domain));
  });
  out$.get_favicon_data_for_domain_or_null = get_favicon_data_for_domain_or_null = cfy(function*(domain){
    var e;
    try {
      return (yield get_favicon_data_for_domain(domain));
    } catch (e$) {
      e = e$;
    }
  });
  co(function*(){
    var domain, favicon_path, favicon_data, e, favicon_response, favicon_buffer, favicon_ico_parsed, favicon_png_buffer;
    domain = process.argv[2];
    if (domain == null) {
      console.log('please specify a domain');
      return;
    }
    if (domain.startsWith('/') || domain.startsWith('./')) {
      favicon_path = path.resolve(domain);
      try {
        favicon_data = (yield jimp.read(favicon_path));
        favicon_data.resize(40, 40);
        console.log((yield function(it){
          return favicon_data.getBase64('image/png', it);
        }));
        return;
      } catch (e$) {
        e = e$;
        favicon_response = (yield fetch(favicon_path));
        favicon_buffer = new Uint8Array((yield favicon_response.buffer())).buffer;
        favicon_ico_parsed = (yield icojs.parse(favicon_buffer));
        favicon_png_buffer = toBuffer(favicon_ico_parsed[0].buffer);
        console.log('data:image/png;base64,' + favicon_png_buffer.toString('base64'));
        return;
      }
    }
    favicon_data = (yield get_favicon_data_for_domain(domain));
    return console.log(favicon_data);
  });
}).call(this);
