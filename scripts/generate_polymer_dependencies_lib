#!/usr/bin/env node
// Generated by LiveScript 1.5.0
(function(){
  var fs, cheerio, process, optionator, glob, path, src_path, options, set_src_path, set_src_path_from_argv, get_options, get_option_parser, set_options, set_options_from_argv, get_abs_path_noerr, get_abs_path, get_abs_path_script, script_deps, get_html_import_abspath, html_import_deps, generated_during_this_run, generate_dependencies_for_all_files_in_src_path, generate_dependencies_for_file, file_contents_cached, output_file_contents_cached, generate_dependencies_for_file_recursive, out$ = typeof exports != 'undefined' && exports || this;
  fs = require('fs');
  cheerio = require('cheerio');
  process = require('process');
  optionator = require('optionator');
  glob = require('glob');
  path = require('upath');
  src_path = null;
  options = {};
  out$.set_src_path = set_src_path = function(new_src_path){
    return src_path = new_src_path;
  };
  out$.set_src_path_from_argv = set_src_path_from_argv = function(){
    return src_path = path.resolve(process.argv[1], '../../src');
  };
  out$.get_options = get_options = function(){
    return options;
  };
  get_option_parser = function(){
    var options_list, option_parser;
    options_list = [
      {
        option: 'tostdout',
        type: 'Boolean',
        'default': 'false',
        description: 'Prints result to stdout instead of writing to .deps.js file'
      }, {
        option: 'verbose',
        type: 'Boolean',
        'default': 'false',
        description: 'Prints additional information to stdout'
      }, {
        option: 'bower',
        type: 'Boolean',
        'default': 'false',
        description: 'Include bower_components directory among those we generate .deps.js files for'
      }, {
        option: 'jspm',
        type: 'Boolean',
        'default': 'false',
        description: 'Include jspm_packages directory among those we generate .deps.js files for'
      }, {
        option: 'target_jspm',
        type: 'Boolean',
        'default': 'false',
        description: 'Target for generated files is jspm'
      }, {
        option: 'modules_custom',
        type: 'Boolean',
        'default': 'false',
        description: 'Include modules_custom directory among those we generate .deps.js files for'
      }, {
        option: 'regenerate',
        type: 'Boolean',
        'default': 'true',
        description: 'Regenerates .deps.js files that already exist'
      }, {
        option: 'recursive',
        type: 'Boolean',
        'default': 'true',
        description: 'Generates .deps.js files recursively'
      }, {
        option: 'html_require_prefix',
        type: 'Boolean',
        'default': 'false',
        description: 'Include html! prefix in the webpack require statement'
      }
    ];
    option_parser = optionator({
      options: options_list
    });
    return option_parser;
  };
  out$.set_options = set_options = function(custom_options){
    var option_parser, k, v, results$ = [];
    option_parser = get_option_parser();
    options = option_parser.parseArgv('');
    if (custom_options != null) {
      for (k in custom_options) {
        v = custom_options[k];
        results$.push(options[k] = v);
      }
      return results$;
    }
  };
  out$.set_options_from_argv = set_options_from_argv = function(){
    var option_parser;
    option_parser = get_option_parser();
    return options = option_parser.parseArgv(process.argv);
  };
  get_abs_path_noerr = function(import_path, filepath_abs){
    var output;
    output = path.resolve(filepath_abs, import_path);
    if (fs.existsSync(output)) {
      return output;
    }
    output = path.resolve(src_path, import_path);
    if (fs.existsSync(output)) {
      return output;
    }
    return null;
  };
  get_abs_path = function(import_path, filepath_abs){
    var output;
    output = get_abs_path_noerr(import_path, filepath_abs);
    if (output == null) {
      console.log("missing file " + import_path + " relative to " + filepath_abs + " or " + src_path);
    }
    return output;
  };
  get_abs_path_script = function(import_path, filepath_abs){
    var output, i$, ref$, len$, extension;
    output = get_abs_path_noerr(import_path, filepath_abs);
    if (output == null) {
      for (i$ = 0, len$ = (ref$ = ['.ls', '.jsx']).length; i$ < len$; ++i$) {
        extension = ref$[i$];
        output = get_abs_path_noerr(import_path.replace(/\.js$/, extension), filepath_abs);
        if (output !== null) {
          break;
        }
      }
    }
    if (output == null) {
      console.log("missing file " + import_path + " relative to " + filepath_abs + " or " + src_path);
    }
    return output;
  };
  script_deps = function(tag, params){
    var filepath_abs, filename_abs, $, import_path, filename_rel;
    filepath_abs = params.filepath_abs, filename_abs = params.filename_abs, $ = params.$;
    import_path = $(tag).attr('src');
    if (import_path == null) {
      if (filename_abs.endsWith('/src/popup.html') || filename_abs.endsWith('/src/index.html')) {
        return '';
      }
      if ($(tag).attr('type') === 'text/markdown') {
        return '';
      }
      console.log("script tag in " + filename_abs + " is missing src attribute");
      return '';
    }
    filename_abs = get_abs_path_script(import_path, filepath_abs);
    if (filename_abs == null) {
      return '';
    }
    filename_rel = path.relative(src_path, filename_abs);
    filename_rel = filename_rel.replace(/\.ls$/, '').replace(/\.js$/, '');
    return "require('" + filename_rel + "')";
  };
  get_html_import_abspath = function(tag, params){
    var filepath_rel, filepath_abs, $, import_path, filename_abs;
    filepath_rel = params.filepath_rel, filepath_abs = params.filepath_abs, $ = params.$;
    import_path = $(tag).attr('href');
    filename_abs = get_abs_path(import_path, filepath_abs);
    return filename_abs;
  };
  html_import_deps = function(tag, params){
    var filepath_rel, filepath_abs, $, import_path, filename_abs, filename_rel, output, deps_file;
    filepath_rel = params.filepath_rel, filepath_abs = params.filepath_abs, $ = params.$;
    import_path = $(tag).attr('href');
    filename_abs = get_abs_path(import_path, filepath_abs);
    if (filename_abs == null) {
      return '';
    }
    filename_rel = path.relative(src_path, filename_abs);
    output = [];
    deps_file = filename_rel.replace(/\.html$/, '.deps.js');
    output.push("require('" + deps_file + "')");
    return output.join("\n");
  };
  generated_during_this_run = {};
  out$.generate_dependencies_for_all_files_in_src_path = generate_dependencies_for_all_files_in_src_path = function(){
    var i$, ref$, len$, filename;
    generated_during_this_run = {};
    for (i$ = 0, len$ = (ref$ = glob.sync(src_path + '/**/*.html')).length; i$ < len$; ++i$) {
      filename = ref$[i$];
      if (!options.bower && filename.indexOf('/bower_components/') !== -1) {
        continue;
      }
      if (!options.jspm && filename.indexOf('/jspm_packages/') !== -1) {
        continue;
      }
      if (!options.modules_custom && filename.indexOf('/modules_custom/') !== -1) {
        continue;
      }
      generate_dependencies_for_file_recursive(filename);
    }
  };
  out$.generate_dependencies_for_file = generate_dependencies_for_file = function(filename_abs){
    generated_during_this_run = {};
    return generate_dependencies_for_file_recursive(filename_abs);
  };
  file_contents_cached = {};
  output_file_contents_cached = {};
  generate_dependencies_for_file_recursive = function(filename_abs){
    var outfile_abs, filename_rel, filepath_rel, filepath_abs, cached_contents, current_contents, $, params, output, dependencies, i$, ref$, len$, tag, dependency_file, cached_output, dep;
    if (options.target_jspm) {
      outfile_abs = filename_abs.replace(/\.html/, '.jspm.js');
    } else {
      outfile_abs = filename_abs.replace(/\.html/, '.deps.js');
    }
    if (generated_during_this_run[outfile_abs]) {
      return;
    }
    generated_during_this_run[outfile_abs] = true;
    if (!options.tostdout && fs.existsSync(outfile_abs)) {
      if (!options.regenerate) {
        return;
      }
    }
    if (options.verbose) {
      console.log("generating: " + outfile_abs);
    }
    filename_rel = path.relative(src_path, filename_abs);
    filepath_rel = path.resolve(filename_rel, '..');
    filepath_abs = path.resolve(filename_abs, '..');
    cached_contents = file_contents_cached[filename_abs];
    current_contents = null;
    if (fs.existsSync(filename_abs)) {
      current_contents = fs.readFileSync(filename_abs, 'utf-8');
    }
    if (current_contents === cached_contents) {
      return;
    }
    file_contents_cached[filename_abs] = current_contents;
    $ = cheerio.load(current_contents);
    params = {
      filepath_rel: filepath_rel,
      filepath_abs: filepath_abs,
      filename_abs: filename_abs,
      $: $
    };
    output = [];
    dependencies = [];
    output.push('// this file was generated by scripts/generate_polymer_dependencies');
    output.push('// do not edit this file directly');
    output.push('// instead, edit the corresponding .html file and re-run the script');
    output.push("const {import_dom_modules} = require('libs_frontend/dom_utils')");
    for (i$ = 0, len$ = (ref$ = $('link[rel="import"]')).length; i$ < len$; ++i$) {
      tag = ref$[i$];
      if (options.verbose) {
        if (tag.type === 'css') {
          console.log('has css import via html imports: ' + filename_abs);
        }
      }
      dependency_file = get_html_import_abspath(tag, params);
      if (dependency_file == null) {
        console.log("html import does not exist for " + filename_abs);
        continue;
      }
      dependencies.push(dependency_file);
      output.push(html_import_deps(tag, params));
    }
    if (options.target_jspm) {
      output.push("import_dom_modules(require('" + filename_rel + "!text'), '" + filename_rel + "')");
    } else if (options.html_require_prefix) {
      output.push("import_dom_modules(require('html!" + filename_rel + "'), '" + filename_rel + "')");
    } else {
      output.push("import_dom_modules(require('" + filename_rel + "'), '" + filename_rel + "')");
    }
    for (i$ = 0, len$ = (ref$ = $('link[rel="stylesheet"]')).length; i$ < len$; ++i$) {
      tag = ref$[i$];
      if (options.verbose) {
        console.log('has stylesheet: ' + filename_abs);
      }
    }
    if (options.verbose) {
      for (i$ = 0, len$ = (ref$ = $('style')).length; i$ < len$; ++i$) {
        tag = ref$[i$];
        if (tag.parentNode == null) {
          console.log('has style with no dom-module parent: ' + filename_abs);
        }
        if (tag.parentNode != null) {
          console.log(tag.parentNode.name);
        }
      }
    }
    for (i$ = 0, len$ = (ref$ = $('script')).length; i$ < len$; ++i$) {
      tag = ref$[i$];
      output.push(script_deps(tag, params));
    }
    output = output.join("\n").split("\n").filter(function(it){
      return it.length > 0;
    }).join("\n") + "\n";
    if (options.tostdout) {
      console.log(output);
      return;
    }
    cached_output = output_file_contents_cached[outfile_abs];
    if (cached_output == null && fs.existsSync(outfile_abs)) {
      cached_output = fs.readFileSync(outfile_abs, 'utf-8');
      output_file_contents_cached[outfile_abs] = cached_output;
    }
    if (cached_output !== output) {
      output_file_contents_cached[outfile_abs] = output;
      fs.writeFileSync(outfile_abs, output);
      if (options.recursive) {
        for (i$ = 0, len$ = dependencies.length; i$ < len$; ++i$) {
          dep = dependencies[i$];
          generate_dependencies_for_file_recursive(dep);
        }
      }
    }
  };
}).call(this);
