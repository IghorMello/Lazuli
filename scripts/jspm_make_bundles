#!/usr/bin/env node
// Generated by LiveScript 1.5.0
(function(){
  var jsYaml, fs, ref$, exec, which, i$, len$, command, read_bundle_contents, make_jspm_browser_config_with_bundles, write_jspm_browser_config_with_bundles, make_systemjs_paths_config_with_bundles, write_systemjs_paths_config_with_bundles, jspm_bundle_info_list, bundle_output, jspm_bundle_info, bundle_name, bundle_contents, bundle_contents_string;
  jsYaml = require('js-yaml');
  fs = require('fs');
  ref$ = require('shelljs'), exec = ref$.exec, which = ref$.which;
  for (i$ = 0, len$ = (ref$ = ['jspm', 'babili-inplace']).length; i$ < len$; ++i$) {
    command = ref$[i$];
    if (!which(command)) {
      console.log("missing " + command + " command. please run the following command:");
      console.log("npm install -g " + command);
      process.exit();
    }
  }
  read_bundle_contents = function(){
    var jspm_browser_data_text, bundles_idx, bundles;
    jspm_browser_data_text = fs.readFileSync('jspm.browser.js', 'utf-8');
    bundles_idx = jspm_browser_data_text.indexOf('bundles:');
    jspm_browser_data_text = jspm_browser_data_text.substr(bundles_idx + 'bundles:'.length).trim();
    jspm_browser_data_text = jspm_browser_data_text.replace('});', '').trim();
    bundles = jsYaml.safeLoad(jspm_browser_data_text);
    return bundles['build.js'];
  };
  make_jspm_browser_config_with_bundles = function(bundles){
    var jspm_browser_data_text;
    jspm_browser_data_text = fs.readFileSync('jspm_browser_config_template.js', 'utf-8');
    if (bundles != null) {
      jspm_browser_data_text = jspm_browser_data_text.replace('bundles: {}', 'bundles: ' + JSON.stringify(bundles, null, 2));
    }
    return jspm_browser_data_text;
  };
  write_jspm_browser_config_with_bundles = function(bundles){
    var jspm_browser_config;
    jspm_browser_config = make_jspm_browser_config_with_bundles(bundles);
    return fs.writeFileSync('jspm.browser.js', jspm_browser_config, 'utf-8');
  };
  make_systemjs_paths_config_with_bundles = function(bundles){
    var systemjs_paths_data_text;
    systemjs_paths_data_text = fs.readFileSync('systemjs_paths_template.js', 'utf-8');
    if (bundles != null) {
      systemjs_paths_data_text = systemjs_paths_data_text.replace('bundles: {}', 'bundles: ' + JSON.stringify(bundles, null, 2));
    }
    return systemjs_paths_data_text;
  };
  write_systemjs_paths_config_with_bundles = function(bundles){
    var systemjs_paths_config;
    systemjs_paths_config = make_systemjs_paths_config_with_bundles(bundles);
    return fs.writeFileSync('src/systemjs_paths.js', systemjs_paths_config, 'utf-8');
  };
  jspm_bundle_info_list = jsYaml.safeLoad(fs.readFileSync('jspm_bundles.yaml', 'utf-8'));
  bundle_output = {};
  for (i$ = 0, len$ = jspm_bundle_info_list.length; i$ < len$; ++i$) {
    jspm_bundle_info = jspm_bundle_info_list[i$];
    write_jspm_browser_config_with_bundles();
    bundle_name = Object.keys(jspm_bundle_info)[0];
    bundle_contents = jspm_bundle_info[bundle_name];
    bundle_contents_string = bundle_contents.map(fn$).join(' + ');
    exec("jspm bundle " + bundle_contents_string + " --inject");
    bundle_output["bundles/" + bundle_name + ".js"] = read_bundle_contents();
    exec("babili-inplace build.js");
    fs.renameSync('build.js', "src/bundles/" + bundle_name + ".js");
    fs.unlinkSync('build.js.map');
  }
  write_jspm_browser_config_with_bundles(bundle_output);
  write_systemjs_paths_config_with_bundles(bundle_output);
  function fn$(it){
    return '"' + it + '"';
  }
}).call(this);
